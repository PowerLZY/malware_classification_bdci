import warnings
import pandas as pd
from codes.model import *
from codes.utils import *

warnings.filterwarnings('ignore')


def submit_result(inter_path, result_np):
    """ Generate the final result file to be submit. """
    with open(f"{inter_path}/test_filename.txt", 'r') as fp:
        test_filename = fp.read().split()
    result = pd.DataFrame()
    result['filename'] = test_filename
    fam_cols = ['family_' + str(i) for i in range(10)]
    result[fam_cols] = result_np
    result.to_csv(f"{result_path}/result.csv", index=False)


def predict_result(test_data_dict, inter_path):
    """ 生成类权重结果 """
    vote_list = []
    for name, test_data in test_data_dict.items():
        if name in ['words', 'ember_section_ins_words', 'ember_section_ins_semantic']:  # 使用了TFIDF的特征做特征选择
            # TODO if ['words', 'ins'] in name
            selector = joblib.load(open(f"{inter_path}/models/select_model_{name}.pth", "rb"))
            test_data = selector.transform(test_data)

        clf = Model(label=name, inter_path=inter_path)
        y_test = clf.Predict(test_data)
        vote_list.append(y_test)

    labels_loss_np = np.load(f"{inter_path}/feature/labels_loss.npy")
    vote_weight = vote_weight_results(labels_loss_np, vote_list)  # 类权重结果
    # vote = vote_results(vote_list)  # 类平均结果
    return vote_weight


if __name__ == '__main__':

    inter_path = '../data/user_data'
    result_path = '../data/prediction_result'

    # TODO : apend result in list with for
    # ------------------------ result1 ------------------------
    feature_list1 = ['ember', 'section', 'imports', 'exports']
    test_data_dict1 = load_data(feature_list1, inter_path)
    result1 = predict_result(test_data_dict1, inter_path)
    # ------------------------ result2 ------------------------
    feature_list2 = ['ember', 'exports', 'ember_section_ins_words', 'ember_section_ins_semantic']
    test_data_dict2 = load_data(feature_list2, inter_path)
    result2 = predict_result(test_data_dict2, inter_path)
    # ------------------------ result2 ------------------------
    feature_list3 = ['ember', 'exports', 'words', 'ember_section_ins_semantic']
    test_data_dict3 = load_data(feature_list3, inter_path)
    result3 = predict_result(test_data_dict3, inter_path)
    # ------------------------ result2 ------------------------
    feature_list4 = ['ember', 'exports', 'words', 'semantic']
    test_data_dict4 = load_data(feature_list4, inter_path)
    result4 = predict_result(test_data_dict4, inter_path)

    # Model ensemble
    result_np = (result1 + result2 + result3 + result4) / 4

    # Submit result
    submit_result(inter_path, result_np)

