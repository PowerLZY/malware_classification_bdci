#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File    :   train.py
@Contact :   3289218653@qq.com
@License :   (C)Copyright 2021-2022 PowerLZY

@Modify Time      @Author               @Version    @Desciption
------------      -------               --------    -----------
2021-10-04 15:03   PowerLZY&yuan_mes       1.0      保存训练模型，特征选择模型和单特征类别权重
'''

import warnings

import pandas as pd
from code.model import *
from code.features import *
from code.utils import *
from tqdm import tqdm
from xgboost import XGBClassifier
from sklearn.utils import class_weight
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel

warnings.filterwarnings('ignore')


def train_model_old(inter_path, label):
    # TODO: BE MODIFIED with (train_data_dict, train_labels, test_data_dict)
    """ Train a model for specific labeled feature generated before. """

    xgb_model = XGBClassifier(
        objective='multi:softprob',
        num_class=10,
        max_depth=6,
        n_estimators=90,
        learning_rate=0.1,
        eval_metric='mlogloss',
        use_label_encoder=False
    )

    train_fea_path = f"{inter_path}/train_{label}.npy"
    train_lab_path = f"{inter_path}/train_y.npy"
    train_X = np.load(train_fea_path)
    train_y = np.load(train_lab_path)
    clf = Model(xgb_model, train_X, train_y, label, inter_path)
    clf.Fit()


def train_model(train_data_dict, train_labels, inter_path):

    model_A = XGBClassifier(
        objective='multi:softprob',
        num_class=10,
        max_depth=6,
        n_estimators=90,
        learning_rate=0.1,
        eval_metric='mlogloss',
        use_label_encoder=False
    )

    classes_weights = class_weight.compute_sample_weight(
        class_weight='balanced',
        y=train_labels
    )

    labels_loss = pd.DataFrame()

    for name, train_data in train_data_dict.items():

        if name in ['words', 'ember_section_ins_words', 'ember_section_ins_semantic']:  # 使用了TFIDF的特征做特征选择
            # TODO if ['words', 'ins'] in name
            selector = SelectFromModel(estimator=ExtraTreesClassifier(n_estimators=200)).fit(train_data, train_labels,
                                                                                             sample_weight=classes_weights)

            joblib.dump(selector, open(f"{inter_path}/models/select_model_{name}.pth", "wb"))
            train_data = selector.transform(train_data)

        clf = Model(model_A, train_data, train_labels, name, inter_path, labels_loss)
        clf.Fit()

        labels_loss[name] = clf.get_class_weight()

    labels_loss[np.isnan(labels_loss)] = 0
    labels_loss[labels_loss < 0] = 0
    labels_loss_np = np.array(labels_loss)

    np.save(f"{inter_path}/feature/labels_loss", labels_loss_np)


if __name__ == '__main__':

    inter_path = '../data/user_data'
    feature_list = ['ember', 'section', 'imports', 'exports', 'words', 'semantic', 'ember_section_ins_words', 'ember_section_ins_semantic']

    train_data_dict = load_data(feature_list)

    train_lab_path = f"{inter_path}/train_y.npy"
    train_y = np.load(train_lab_path)

    train_model(train_data_dict, train_y, inter_path)
