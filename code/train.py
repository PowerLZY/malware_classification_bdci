#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File    :   train.py
@Contact :   3289218653@qq.com
@License :   (C)Copyright 2021-2022 PowerLZY

@Modify Time      @Author               @Version    @Desciption
------------      -------               --------    -----------
2021-10-04 15:03   PowerLZY&yuan_mes       1.0      保存训练模型，特征选择模型和单特征类别权重
'''

import warnings
import pandas as pd
from code.model import *
from code.features import *
from code.utils import *
from tqdm import tqdm
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel

warnings.filterwarnings('ignore')

def train_model(inter_path, label):
    # TODO: BE MODIFIED with (train_data_dict, train_labels, test_data_dict)
    """ Train a model for specific labeled feature generated before. """

    xgb_model = XGBClassifier(
        objective='multi:softprob',
        num_class=10,
        max_depth=6,
        n_estimators=90,
        learning_rate=0.1,
        eval_metric='mlogloss',
        use_label_encoder=False
    )
    train_fea_path = f"{inter_path}/train_{label}.npy"
    train_lab_path = f"{inter_path}/train_y.npy"
    train_X = np.load(train_fea_path)
    train_y = np.load(train_lab_path)
    clf = Model(xgb_model, train_X, train_y, label, inter_path)
    clf.Fit()

if __name__ == '__main__':

    data_path = '../data/raw_data'
    inter_path = '../data/user_data'
    fix_file_index(data_path, inter_path)

    # Feature engineering for features only generated by pe file in byte-format
    train_pe_path = f"{data_path}/train/pe"
    pe_objs = [ByteHistogram(), ByteEntropyHistogram(), StringExtractor()]
    for obj in pe_objs:
        feature_engineering(obj, train_pe_path, inter_path)

    # Feature engineering for features only generated by asm file in string-format
    train_asm_path = f"{data_path}/train/asm"
    asm_objs = [SectionInfo(), ImportsInfo(), ExportsInfo()]
    for obj in asm_objs:
        feature_engineering(obj, train_asm_path, inter_path)

    # Example for following 2 process: Ember features
    # Maybe define a function...

    # Feature fusion
    # TODO: BE MODIFIED...in feature_engineering.py
    fused_label = 'ember'
    features = ['histogram', 'byteentropy', 'strings']
    data_type = ['train', 'test']
    arr = []
    for f in features:
        arr.append(np.load(f"{inter_path}/train_{f}.npy"))
    np.save(f"{inter_path}/train_{fused_label}.npy", np.hstack(arr).astype(np.float32))

    # Feature selection
    # TODO: BE MODIFIED... in train_model()
    train_fea_path = f"{inter_path}/train_{fused_label}.npy"
    train_lab_path = f"{inter_path}/train_y.npy"
    train_X = np.load(train_fea_path)
    train_y = np.load(train_lab_path)

    selector = SelectFromModel(RandomForestClassifier(), threshold="0.2*mean")
    train_X_r = selector.fit_transform(train_X, train_y)
    selector_path = f"{inter_path}/feature_selector.pkl"
    joblib.dump(selector, selector_path)
    np.save(train_fea_path, train_X_r)


    # Model training
    train_model(inter_path, fused_label)
